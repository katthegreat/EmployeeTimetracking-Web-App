import { useState, useEffect } from 'react';
import { saveAs } from 'file-saver';

export default function AdminControls() {
  const [employees, setEmployees] = useState(() => {
    const storedEmployees = JSON.parse(localStorage.getItem('employees')) || [
      { id: 1, name: 'Snoopy', position: 'Developer', email: 'snoopy@example.com' },
      { id: 2, name: 'Charlie', position: 'Designer', email: 'charlie@example.com' },
      { id: 3, name: 'Lucy', position: 'Manager', email: 'lucy@example.com' }
    ];
    return storedEmployees;
  });

  const [selectedEmployee, setSelectedEmployee] = useState(null);
  const [timeRecords, setTimeRecords] = useState([]);
  const [newEmployee, setNewEmployee] = useState({ name: '', position: '', email: '' });
  const [reportRange, setReportRange] = useState('week');
  const [showAddForm, setShowAddForm] = useState(false);

  // Load employee records
  useEffect(() => {
    localStorage.setItem('employees', JSON.stringify(employees));
    if (selectedEmployee) {
      const records = JSON.parse(localStorage.getItem(`timeRecords_${selectedEmployee.id}`)) || [];
      setTimeRecords(records);
    }
  }, [employees, selectedEmployee]);

  const handleAddEmployee = () => {
    const newId = employees.length > 0 ? Math.max(...employees.map(e => e.id)) + 1 : 1;
    setEmployees([...employees, { ...newEmployee, id: newId }]);
    setNewEmployee({ name: '', position: '', email: '' });
    setShowAddForm(false);
  };

  const generateReport = () => {
    const now = new Date();
    let fromDate, toDate;
    
    if (reportRange === 'week') {
      fromDate = new Date(now.setDate(now.getDate() - now.getDay()));
      toDate = new Date(now.setDate(now.getDate() + 6));
    } else { // month
      fromDate = new Date(now.getFullYear(), now.getMonth(), 1);
      toDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);
    }

    const reportData = employees.map(employee => {
      const records = JSON.parse(localStorage.getItem(`timeRecords_${employee.id}`)) || [];
      const filteredRecords = records.filter(record => {
        const recordDate = new Date(record.date);
        return recordDate >= fromDate && recordDate <= toDate;
      });
      
      const totalHours = filteredRecords.reduce((sum, record) => sum + record.duration, 0);
      
      return {
        employee: employee.name,
        position: employee.position,
        recordsCount: filteredRecords.length,
        totalHours: totalHours.toFixed(2)
      };
    });

    // Create CSV
    const headers = ['Employee', 'Position', 'Records Count', 'Total Hours'];
    const csvContent = [
      headers.join(','),
      ...reportData.map(row => Object.values(row).join(','))
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    saveAs(blob, `${reportRange}ly_report_${new Date().toISOString().slice(0,10)}.csv`);
  };

  return (
    <div style={styles.container}>
      <h2>Admin Dashboard</h2>
      
      <div style={styles.controls}>
        <div style={styles.reportControls}>
          <select 
            value={reportRange}
            onChange={(e) => setReportRange(e.target.value)}
            style={styles.select}
          >
            <option value="week">Weekly</option>
            <option value="month">Monthly</option>
          </select>
          <button onClick={generateReport} style={styles.reportButton}>
            Generate {reportRange === 'week' ? 'Weekly' : 'Monthly'} Report
          </button>
        </div>
        
        <button 
          onClick={() => setShowAddForm(!showAddForm)}
          style={styles.addButton}
        >
          {showAddForm ? 'Cancel' : 'Add New Employee'}
        </button>
      </div>

      {showAddForm && (
        <div style={styles.addForm}>
          <h3>Add New Employee</h3>
          <div style={styles.formGroup}>
            <label>Name:</label>
            <input
              type="text"
              value={newEmployee.name}
              onChange={(e) => setNewEmployee({...newEmployee, name: e.target.value})}
              style={styles.input}
            />
          </div>
          <div style={styles.formGroup}>
            <label>Position:</label>
            <input
              type="text"
              value={newEmployee.position}
              onChange={(e) => setNewEmployee({...newEmployee, position: e.target.value})}
              style={styles.input}
            />
          </div>
          <div style={styles.formGroup}>
            <label>Email:</label>
            <input
              type="email"
              value={newEmployee.email}
              onChange={(e) => setNewEmployee({...newEmployee, email: e.target.value})}
              style={styles.input}
            />
          </div>
          <button onClick={handleAddEmployee} style={styles.submitButton}>
            Add Employee
          </button>
        </div>
      )}

      <div style={styles.grid}>
        <div style={styles.employeeList}>
          <h3>Employees ({employees.length})</h3>
          <ul style={styles.list}>
            {employees.map(employee => (
              <li 
                key={employee.id}
                style={{
                  ...styles.listItem,
                  backgroundColor: selectedEmployee?.id === employee.id ? '#f0f0f0' : 'white'
                }}
                onClick={() => setSelectedEmployee(employee)}
              >
                <div>
                  <strong>{employee.name}</strong>
                  <div style={styles.employeeDetails}>
                    {employee.position} â€¢ {employee.email}
                  </div>
                </div>
              </li>
            ))}
          </ul>
        </div>

        <div style={styles.detailsPanel}>
          {selectedEmployee ? (
            <>
              <h3>{selectedEmployee.name}'s Time Records</h3>
              {timeRecords.length > 0 ? (
                <table style={styles.table}>
                  <thead>
                    <tr>
                      <th>Date</th>
                      <th>Start Time</th>
                      <th>End Time</th>
                      <th>Hours</th>
                    </tr>
                  </thead>
                  <tbody>
                    {timeRecords.map((record, index) => (
                      <tr key={index}>
                        <td>{record.date}</td>
                        <td>{new Date(record.start).toLocaleTimeString()}</td>
                        <td>{new Date(record.end).toLocaleTimeString()}</td>
                        <td>{record.duration.toFixed(2)}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              ) : (
                <p>No records found for this employee</p>
              )}
            </>
          ) : (
            <p>Select an employee to view details</p>
          )}
        </div>
      </div>
    </div>
  );
}

const styles = {
  container: {
    display: 'flex',
    flexDirection: 'column',
    gap: '1.5rem'
  },
  controls: {
    display: 'flex',
    justifyContent: 'space-between',
    gap: '1rem'
  },
  reportControls: {
    display: 'flex',
    gap: '1rem'
  },
  select: {
    padding: '0.5rem',
    borderRadius: '4px',
    border: '1px solid #ddd'
  },
  reportButton: {
    padding: '0.5rem 1rem',
    backgroundColor: '#4CAF50',
    color: 'white',
    border: 'none',
    borderRadius: '4px',
    cursor: 'pointer'
  },
  addButton: {
    padding: '0.5rem 1rem',
    backgroundColor: '#646cff',
    color: 'white',
    border: 'none',
    borderRadius: '4px',
    cursor: 'pointer'
  },
  addForm: {
    backgroundColor: '#f5f5f5',
    padding: '1.5rem',
    borderRadius: '8px',
    marginBottom: '1rem'
  },
  formGroup: {
    marginBottom: '1rem'
  },
  input: {
    width: '100%',
    padding: '0.5rem',
    borderRadius: '4px',
    border: '1px solid #ddd'
  },
  submitButton: {
    padding: '0.5rem 1rem',
    backgroundColor: '#646cff',
    color: 'white',
    border: 'none',
    borderRadius: '4px',
    cursor: 'pointer'
  },
  grid: {
    display: 'grid',
    gridTemplateColumns: '300px 1fr',
    gap: '1.5rem'
  },
  employeeList: {
    backgroundColor: 'white',
    padding: '1rem',
    borderRadius: '8px',
    boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
  },
  list: {
    listStyle: 'none',
    padding: 0,
    margin: 0
  },
  listItem: {
    padding: '0.75rem',
    borderBottom: '1px solid #eee',
    cursor: 'pointer',
    ':hover': {
      backgroundColor: '#f5f5f5'
    }
  },
  employeeDetails: {
    fontSize: '0.8rem',
    color: '#666',
    marginTop: '0.25rem'
  },
  detailsPanel: {
    backgroundColor: 'white',
    padding: '1.5rem',
    borderRadius: '8px',
    boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
  },
  table: {
    width: '100%',
    borderCollapse: 'collapse',
    'th, td': {
      padding: '0.75rem',
      border: '1px solid #ddd',
      textAlign: 'left'
    },
    th: {
      backgroundColor: '#f2f2f2'
    }
  }
};